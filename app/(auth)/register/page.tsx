'use client';

import { useForm, SubmitHandler } from 'react-hook-form'; // üëà 1. ‡∏•‡∏ö FieldError ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å
import { useRouter } from 'next/navigation';
import api from '@/lib/api';
import { isAxiosError } from 'axios'; // üëà 2. Import isAxiosError

// üëà 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Register Form ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field
type RegisterFormInputs = {
  username: string;
  email: string;
  password: string;
  confirmPassword: string; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Type ‡∏î‡πâ‡∏ß‡∏¢
  firstName: string;
  lastName: string;
  phone?: string; // field ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏™‡πà '?'
  address?: string; // field ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏™‡πà '?'
};

export default function RegisterPage() {
  // üëà 4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ useForm
  const { register, handleSubmit, formState: { errors }, watch } = useForm<RegisterFormInputs>();
  const router = useRouter();

  // üëà 5. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ watch('password') ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ validate confirmPassword
  const password = watch('password');

  // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á watch('confirmPassword') ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
  // ‡πÄ‡∏£‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate ‡∏°‡∏±‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö password ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡πÉ‡∏ô register(...) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  // ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î const confirmPassword = watch('confirmPassword') ‡∏à‡∏∞‡πÅ‡∏Å‡πâ Error 'no-unused-vars'

  // üëà 6. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡πÉ‡∏´‡πâ onSubmit
  // 
  const onSubmit: SubmitHandler<RegisterFormInputs> = async (data) => {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ API ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏•‡∏¢
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const apiData = {
      username: data.username,
      email: data.email,
      password: data.password,
      firstName: data.firstName,
      lastName: data.lastName,
      phone: data.phone,
      address: data.address,
    };

    const response = await api.post('/auth/register', apiData);
    
    alert(response.data.message);
    router.push('/login');
  } catch (error) {
    if (isAxiosError(error)) {
      alert(error.response?.data?.message || 'Registration failed. Please try again.');
    } else {
      console.error('An unexpected error occurred:', error);
      alert('An unexpected error occurred.');
    }
  }
};


  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-5 text-center">Register</h1>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        {/* Username */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Username</label>
          <input
            {...register('username', { required: 'Username is required' })}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
          {errors.username && <span className="text-red-500 text-xs">{errors.username.message}</span>}
        </div>

        {/* Email */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="email"
            {...register('email', { required: 'Email is required' })}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
          {errors.email && <span className="text-red-500 text-xs">{errors.email.message}</span>}
        </div>

        {/* Password */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Password</label>
          <input
            type="password"
            {...register('password', {
              required: 'Password is required',
              minLength: { value: 6, message: 'Password must be at least 6 characters' }
            })}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
          {errors.password && <span className="text-red-500 text-xs">{errors.password.message}</span>}
        </div>

        {/* Confirm Password */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Confirm Password ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</label>
          <input
            type="password"
            {...register('confirmPassword', {
              required: 'Please confirm your password',
              validate: value => value === password || "Passwords do not match"
            })}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
          {errors.confirmPassword && <span className="text-red-500 text-xs">{errors.confirmPassword.message}</span>}
        </div>

        {/* First Name & Last Name */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">First Name ‡∏ä‡∏∑‡πà‡∏≠</label>
            <input
              {...register('firstName', { required: 'First name is required' })}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
            />
            {errors.firstName && <span className="text-red-500 text-xs">{errors.firstName.message}</span>}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Last Name ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
            <input
              {...register('lastName', { required: 'Last name is required' })}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
            />
            {errors.lastName && <span className="text-red-500 text-xs">{errors.lastName.message}</span>}
          </div>
        </div>

        {/* Optional fields: Phone & Address */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Phone ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (Optional)</label>
          <input
            {...register('phone')}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Address‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà email idline messenger  (Optional)</label>
          <textarea
            {...register('address')}
            className="mt-1 block w-full p-2 border border-gray-300 rounded-md"
          />
        </div>

        <button type="submit" className="w-full bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-md">
          Register ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        </button>
      </form>
    </div>
  );
}